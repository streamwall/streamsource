---
# Deployment playbook for code updates (no infrastructure changes)
- name: Deploy StreamSource Application
  hosts: app_servers
  become: yes
  become_user: "{{ app_user }}"
  serial: "50%"  # Rolling deployment
  
  vars:
    deployment_id: "{{ ansible_date_time.epoch }}"
    
  pre_tasks:
    - name: Check current application health
      uri:
        url: "http://localhost:3000/health"
        status_code: 200
      delegate_to: "{{ inventory_hostname }}"
      register: health_check
      failed_when: false

    - name: Create deployment directory
      file:
        path: "{{ app_path }}/releases/{{ deployment_id }}"
        state: directory
        mode: '0755'

  tasks:
    - name: Clone application code
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_path }}/releases/{{ deployment_id }}"
        version: "{{ github_branch | default('main') }}"
        force: yes

    - name: Copy shared files
      file:
        src: "{{ app_path }}/shared/{{ item }}"
        dest: "{{ app_path }}/releases/{{ deployment_id }}/{{ item }}"
        state: link
        force: yes
      loop:
        - config/master.key
        - .env
        - storage
        - log
      ignore_errors: yes

    - name: Install Ruby dependencies
      shell: |
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
        bundle config set deployment 'true'
        bundle config set without 'development test'
        bundle install --jobs 4
      args:
        chdir: "{{ app_path }}/releases/{{ deployment_id }}"

    - name: Install JavaScript dependencies
      command: yarn install --frozen-lockfile --production
      args:
        chdir: "{{ app_path }}/releases/{{ deployment_id }}"

    - name: Compile assets
      shell: |
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
        yarn build
        yarn build:css
        bundle exec rails assets:precompile
      args:
        chdir: "{{ app_path }}/releases/{{ deployment_id }}"
      environment:
        RAILS_ENV: production
        NODE_ENV: production
      when: force_asset_compile | default(true) | bool

    - name: Run database migrations (first server only)
      shell: |
        export PATH="$HOME/.rbenv/bin:$PATH"
        eval "$(rbenv init -)"
        bundle exec rails db:migrate
      args:
        chdir: "{{ app_path }}/releases/{{ deployment_id }}"
      environment:
        RAILS_ENV: production
      run_once: true
      register: migration_result

    - name: Update current symlink
      file:
        src: "{{ app_path }}/releases/{{ deployment_id }}"
        dest: "{{ app_path }}/current"
        state: link
        force: yes
      become: yes
      become_user: root

    - name: Restart Puma gracefully
      become: yes
      become_user: root
      systemd:
        name: puma
        state: restarted
      throttle: 1

    - name: Wait for application to start
      wait_for:
        port: 3000
        delay: 5
        timeout: 60

    - name: Verify deployment health
      uri:
        url: "http://localhost:3000/health"
        status_code: 200
      retries: 5
      delay: 10

    - name: Clean up old releases (keep last 5)
      shell: |
        cd {{ app_path }}/releases && \
        ls -t | tail -n +6 | xargs -r rm -rf
      args:
        warn: false

  handlers:
    - name: rollback deployment
      file:
        src: "{{ app_path }}/releases/{{ previous_release | default('current') }}"
        dest: "{{ app_path }}/current"
        state: link
        force: yes
      when: deployment_failed | default(false)

  post_tasks:
    - name: Send deployment notification
      debug:
        msg: "Deployment {{ deployment_id }} completed successfully"