name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  RUBY_VERSION: 3.3.6
  NODE_VERSION: 20

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: streamsource_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: |
        bundle install --jobs 4 --retry 3
        yarn install --frozen-lockfile

    - name: Build assets
      run: |
        yarn build
        yarn build:css

    - name: Setup test database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/streamsource_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        bin/rails db:create
        bin/rails db:migrate

    - name: Run tests
      env:
        RAILS_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/streamsource_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      run: bin/test

    - name: Run linters
      run: |
        bundle exec rubocop
        yarn lint

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage
        path: coverage/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.get_url.outputs.app_url }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Check deployment type
      id: deployment_type
      run: |
        # Check if we have App Platform or Droplets
        if [[ -n "${{ secrets.DO_APP_ID }}" ]]; then
          echo "type=app-platform" >> $GITHUB_OUTPUT
        elif doctl compute droplet list --tag-name streamsource --format ID --no-header | grep -q .; then
          echo "type=droplets" >> $GITHUB_OUTPUT
        else
          echo "No deployment target found"
          exit 1
        fi

    - name: Deploy to App Platform
      if: steps.deployment_type.outputs.type == 'app-platform'
      run: |
        doctl apps update ${{ secrets.DO_APP_ID }} --spec .do/app.yaml --wait
        
    - name: Get App URL
      if: steps.deployment_type.outputs.type == 'app-platform'
      id: get_url
      run: |
        APP_URL=$(doctl apps get ${{ secrets.DO_APP_ID }} --format DefaultIngress --no-header)
        echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT

    - name: Run production migrations
      if: steps.deployment_type.outputs.type == 'app-platform'
      run: |
        doctl apps run ${{ secrets.DO_APP_ID }} web -- bundle exec rails db:migrate RAILS_ENV=production

    - name: Deploy to Droplets
      if: steps.deployment_type.outputs.type == 'droplets'
      run: |
        # Install Ansible
        pip install ansible
        
        # Create inventory from droplets
        ./scripts/generate-inventory.sh production
        
        # Run deployment
        cd ansible
        ansible-playbook deploy.yml -i inventory/production.yml

    - name: Health check
      run: |
        sleep 30
        if [[ "${{ steps.deployment_type.outputs.type }}" == "app-platform" ]]; then
          curl -f "${{ steps.get_url.outputs.app_url }}/health" || exit 1
        else
          # Check droplet health
          for ip in $(doctl compute droplet list --tag-name streamsource --format PublicIPv4 --no-header); do
            curl -f "http://$ip/health" || exit 1
          done
        fi

  terraform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure Terraform Backend
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            endpoint = "https://nyc3.digitaloceanspaces.com"
            region = "us-east-1"
            key = "terraform/streamsource.tfstate"
            bucket = "${{ secrets.DO_SPACES_BUCKET }}"
            access_key = "${{ secrets.DO_SPACES_ACCESS_KEY }}"
            secret_key = "${{ secrets.DO_SPACES_SECRET_KEY }}"
            skip_credentials_validation = true
            skip_metadata_api_check = true
          }
        }
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -no-color -out=tfplan
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        TF_VAR_github_repo: ${{ github.server_url }}/${{ github.repository }}.git
        TF_VAR_secret_key_base: ${{ secrets.SECRET_KEY_BASE }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_rails_master_key: ${{ secrets.RAILS_MASTER_KEY }}
        TF_VAR_ssh_key_fingerprints: ${{ secrets.SSH_KEY_FINGERPRINTS }}

    # Uncomment to apply terraform changes automatically
    # - name: Terraform Apply
    #   if: github.event_name == 'push'
    #   run: terraform apply -auto-approve tfplan